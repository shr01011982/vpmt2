/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PermissionRequest;
import org.openapitools.model.PermissionResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-11T09:30:45.499197400+05:30[Asia/Calcutta]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/permissions : Create a new permission
     *
     * @param permissionRequest  (required)
     * @return Permission created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createPermission",
        summary = "Create a new permission",
        responses = {
            @ApiResponse(responseCode = "201", description = "Permission created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/permissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermissionResponse> createPermission(
        @Parameter(name = "PermissionRequest", description = "", required = true) @Valid @RequestBody PermissionRequest permissionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"VIEW_REPORTS\", \"description\" : \"Grants access to view reports\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/permissions/{id} : Delete permission by ID
     *
     * @param id ID of the permission to delete (required)
     * @return Permission deleted successfully (status code 204)
     *         or Permission not found (status code 404)
     */
    @Operation(
        operationId = "deletePermissionById",
        summary = "Delete permission by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Permission deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Permission not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/permissions/{id}"
    )
    
    default ResponseEntity<Void> deletePermissionById(
        @Parameter(name = "id", description = "ID of the permission to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/permissions : Retrieve all permissions
     *
     * @return List of all permissions (status code 200)
     */
    @Operation(
        operationId = "getAllPermissions",
        summary = "Retrieve all permissions",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all permissions", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PermissionResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/permissions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PermissionResponse>> getAllPermissions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"VIEW_REPORTS\", \"description\" : \"Grants access to view reports\", \"id\" : 1 }, { \"name\" : \"VIEW_REPORTS\", \"description\" : \"Grants access to view reports\", \"id\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/permissions/{id} : Get permission by ID
     *
     * @param id ID of the permission (required)
     * @return Permission found (status code 200)
     *         or Permission not found (status code 404)
     */
    @Operation(
        operationId = "getPermissionById",
        summary = "Get permission by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Permission found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Permission not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/permissions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionResponse> getPermissionById(
        @Parameter(name = "id", description = "ID of the permission", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"VIEW_REPORTS\", \"description\" : \"Grants access to view reports\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
