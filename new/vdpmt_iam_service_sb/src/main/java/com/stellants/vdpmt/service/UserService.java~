package com.stellants.vdpmt.service;

import com.stellants.vdpmt.dto.AuthResponse;
import com.stellants.vdpmt.dto.RegisterRequest;
import com.stellants.vdpmt.dto.UserDTO;
import com.stellants.vdpmt.entity.User;
import com.stellants.vdpmt.repository.UserRepository;
import com.stellants.vdpmt.security.JwtService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired private UserRepository userRepo;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private JwtService jwtService;

    public AuthResponse register(RegisterRequest request) {
        if (userRepo.existsByUsername(request.getUsername()) || userRepo.existsByEmail(request.getEmail())) {
            throw new RuntimeException("Username or Email already exists.");
        }

        User user = new User();
        user.setUsername(request.getUsername());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setEmail(request.getEmail());

        userRepo.save(user);

        String token = jwtService.generateToken(user.getUsername());

        UserDTO result = new UserDTO();
        result.setUsername(user.getUsername());
        result.setEmail(user.getEmail());

        AuthResponse response = new AuthResponse();
        response.setStatus("success");
        response.setStatusCode(200);
        response.setMessage("Registred successful");
        response.setToken(token);
        response.setResult(result);

        return response;
    }

    public AuthResponse login(LoginRequest request) {
        User user = userRepo.findByUsername(request.getUsername())
                .orElseThrow(() -> new RuntimeException("Invalid username or password"));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new RuntimeException("Invalid username or password");
        }

        String token = jwtService.generateToken(user.getUsername());

        UserDTO result = new UserDTO();
        result.setUsername(user.getUsername());
        result.setEmail(user.getEmail());

        AuthResponse response = new AuthResponse();
        response.setStatus("success");
        response.setStatusCode(200);
        response.setMessage("Login successful");
        response.setToken(token);
        response.setResult(result);

        return response;
    }

}
